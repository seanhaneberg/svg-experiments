{"version":3,"sources":["SVGWave.jsx","MetadataSliders.jsx","MetadataCheckboxes.jsx","ComponentMonitor.jsx","SVGWaveController.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SVGWave","amplitude","this","props","periodWidth","strokeWidth","height","width","startX","startXOffset","startY","dx1","dy1","dx","dy","dx2","dy2","cubicCurveData","startPts","firstControlPts","secondControlPts","destination","numCycles","i","thisY","thisX","nextX","suffix","concat","debugJSX","showDebug","line1StartX","line1StartY","line1EndX","line1EndY","line2StartX","line2StartY","line2EndX","line2EndY","push","react_default","a","createElement","key","x1","y1","x2","y2","stroke","r","cx","cy","fill","dProp","className","style","fillOpacity","d","strokeLinecap","Component","MetadataSliders","fieldName","oldVal","newVal","onChange","_this","metadata","items","Object","keys","map","index","curFieldVal","es","min","mins","max","maxes","title","length","MetadataCheckboxes","type","checked","ComponentMonitor","sliderProps","checkboxProps","subject","val","src_MetadataSliders_0","src_MetadataCheckboxes_0","minStroke","minPeriodWidth","minAmplitude","minCycles","minHeight","minWidth","SVGWaveController","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newState","setState","_this2","springWave","renderprops","to","delay","onRest","item","animatedProps","objectSpread","wave","src_SVGWave_0","monitor","src_ComponentMonitor_0","bind","from","opacity","config","molasses","App","margin","src_SVGWaveController","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2454121.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SVGWave.css'\n\nclass SVGWave extends Component {\n  render() {\n    const amplitude = this.props.amplitude;\n    const periodWidth = this.props.periodWidth;\n    const strokeWidth = this.props.strokeWidth;\n    const height = this.props.height;\n    const width = this.props.width;\n    const startX = this.props.startXOffset ? this.props.startXOffset : 0;\n    const startY = height / 2;\n\n    // 1st control pt\n    const dx1 = startX;\n    const dy1 = startY + amplitude;\n\n    // Destination\n    const dx = startX + periodWidth;\n    const dy = startY;\n\n    // 2nd control pt\n    const dx2 = dx;\n    const dy2 = dy1;\n\n    let cubicCurveData = {\n      startPts: [[startX, startY]],\n      firstControlPts: [[dx1, dy1]],\n      secondControlPts: [[dx2, dy2]],\n      destination: [[dx, dy]],\n    };\n\n    const numCycles = this.props.numCycles;\n\n\n    for (let i = 1; i < numCycles; i++) {\n      // Every other cycle needs inverted control points\n      let thisY = (i % 2) ? startY + (startY - dy1) : dy1;\n      let thisX = cubicCurveData.destination[i - 1][0];\n      let nextX = thisX + periodWidth;\n      cubicCurveData.startPts[i] = cubicCurveData.destination[i - 1];\n      cubicCurveData.firstControlPts[i] = [thisX, thisY];\n      cubicCurveData.secondControlPts[i] = [nextX, thisY];\n      cubicCurveData.destination[i] = [nextX, cubicCurveData.destination[i - 1][1]];\n    }\n\n    let suffix = '';\n\n    // The first cycle doesn't require a suffix\n    for (let i = 1; i < numCycles; i++) {\n      suffix += `S\n        ${cubicCurveData.secondControlPts[i][0]} ${cubicCurveData.secondControlPts[i][1]}\n        ${cubicCurveData.destination[i][0]} ${cubicCurveData.destination[i][1]}`;\n    }\n\n    const debugJSX = [];\n    if (this.props.showDebug) {\n      for (let i = 0; i < numCycles; i++) {\n        const line1StartX = cubicCurveData.startPts[i][0];\n        const line1StartY = cubicCurveData.startPts[i][1];\n        const line1EndX = cubicCurveData.firstControlPts[i][0];\n        const line1EndY = cubicCurveData.firstControlPts[i][1];\n        const line2StartX = cubicCurveData.destination[i][0];\n        const line2StartY = cubicCurveData.destination[i][1];\n        const line2EndX = cubicCurveData.secondControlPts[i][0];\n        const line2EndY = cubicCurveData.secondControlPts[i][1];\n\n        debugJSX.push(\n          <line\n            key={\"line1\" + i}\n            x1={line1StartX}\n            y1={line1StartY}\n            x2={line1EndX}\n            y2={line1EndY}\n            stroke=\"grey\"\n          />\n        );\n\n        debugJSX.push(\n          <line\n            key={\"line2\" + i}\n            x1={line2StartX}\n            y1={line2StartY}\n            x2={line2EndX}\n            y2={line2EndY}\n            stroke=\"grey\"\n          />\n        );\n\n        debugJSX.push(<circle key={\"circle1\" + i} r={3} cx={line1EndX} cy={line1EndY} fill=\"grey\" />);\n        debugJSX.push(<circle key={\"circle2\" + i} r={3} cx={line2EndX} cy={line2EndY} fill=\"grey\" />);\n      }\n    }\n\n    const dProp =\n      `M\n      ${startX} ${startY}\n      C\n      ${dx1} ${dy1}\n      ${dx2} ${dy2}\n      ${dx} ${dy}\n      ${suffix}`;\n\n    return (\n      // Need to return:\n      <div className=\"container\">\n        <div className=\"content-pane\">\n          <svg height={height} width={width}>\n            <rect height={height} width={width} style={{stroke: \"grey\"}} fillOpacity={0.0}/>\n              <path\n                d={dProp}\n                stroke=\"black\"\n                strokeWidth={strokeWidth}\n                strokeLinecap=\"round\"\n                fill=\"transparent\"\n              />\n              {debugJSX}\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SVGWave;\n","import React, { Component } from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport './MetadataSliders.css';\n\nclass MetadataSliders extends Component {\n\n  onChange(fieldName, oldVal, newVal) {\n    return this.props.onChange(fieldName, oldVal, newVal);\n  }\n\n  render() {\n    // Process all fields on the metadata object\n    const metadata = this.props.metadata ? this.props.metadata : {};\n    const items = Object.keys(metadata).map((fieldName, index) => {\n      const curFieldVal = metadata[fieldName];\n      return (\n        <div key={index}>\n          <Slider\n            min={this.props.mins[fieldName]}\n            max={this.props.maxes[fieldName]}\n            onChange={(newVal) => { \n              return this.onChange(fieldName, curFieldVal, newVal);\n            }}\n          />\n          <div> {fieldName} - {curFieldVal} </div>\n        </div>\n      );\n    });\n\n    let title = null;\n    if (this.props.title && items.length > 0) {\n      title = (\n        <div className=\"metadata-title\">\n          {this.props.title}\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {title}\n        <div className=\"metadata-item\">{items}</div>\n      </div>\n    );\n  }\n}\n\nexport default MetadataSliders;\n","import React, { Component } from 'react';\nimport './MetadataCheckboxes.css';\n\nclass MetadataCheckboxes extends Component {\n\n  onChange(fieldName, oldVal, newVal) {\n    return this.props.onChange(fieldName, oldVal, newVal);\n  }\n\n  render() {\n    // Process all fields on the metadata object\n    const metadata = this.props.metadata ? this.props.metadata : {};\n    const items = Object.keys(metadata).map((fieldName, index) => {\n      const curFieldVal = metadata[fieldName];\n      return (\n        <div key={index}>\n          {fieldName}\n          <input\n            type=\"checkbox\"\n            onChange={() => {\n              this.onChange(fieldName, curFieldVal, !curFieldVal);\n            }}\n            checked={curFieldVal}\n          />\n        </div>\n      );\n    });\n\n\n    return (\n      <div>\n        <div className=\"metadata-item\">{items}</div>\n      </div>\n    );\n  }\n}\n\nexport default MetadataCheckboxes;\n","import React, { Component } from 'react';\nimport MetadataSliders from './MetadataSliders';\nimport './ComponentMonitor.css'\nimport MetadataCheckboxes from './MetadataCheckboxes';\n\nclass ComponentMonitor extends Component {\n\n  render() {\n\n    let sliderProps = {};\n    let checkboxProps = {};\n\n    if (!this.props.subject) {\n      return null;\n    }\n\n    Object.keys(this.props.subject.props).map((fieldName) => {\n      const val = this.props.subject.props[fieldName];\n      const type = (typeof val);\n      switch (type) {\n        case \"number\":\n          sliderProps[fieldName] = val;\n          break;\n        case \"boolean\":\n          checkboxProps[fieldName] = val;\n          break;\n        default:\n          // Ignore unknown types\n          break;\n      }\n      return null;\n    });\n\n    return (\n      <div className=\"container\">\n        <div className=\"slider-pane\">\n          <MetadataSliders\n            title=\"props\"\n            onChange={this.props.onChange}\n            metadata={sliderProps}\n            mins={this.props.mins}\n            maxes={this.props.maxes}\n          />\n        </div>\n        <MetadataCheckboxes\n          onChange={this.props.onChange}\n          metadata={checkboxProps}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ComponentMonitor;\n","import React, { Component } from 'react';\nimport './SVGWave.css'\nimport SVGWave from './SVGWave';\nimport ComponentMonitor from './ComponentMonitor';\nimport { Spring, config } from 'react-spring/renderprops';\n\nconst minStroke = 2;\nconst maxStroke = 10;\nconst minPeriodWidth = 50;\nconst maxPeriodWidth = 150;\nconst minAmplitude = 50;\nconst maxAmplitude = 150;\nconst minCycles = 2;\nconst maxCycles = 20;\nconst minHeight = 75;\nconst maxHeight = 200;\nconst minWidth = 75;\nconst maxWidth = 400;\nconst minXOffset = -200;\nconst maxXOffset = 200;\n\nclass SVGWaveController extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      strokeWidth: minStroke,\n      periodWidth: minPeriodWidth,\n      amplitude: minAmplitude,\n      numCycles: minCycles,\n      height: minHeight,\n      width: minWidth,\n      showDebug: false,\n      startXOffset: 0,\n    };\n  }\n\n  onChange(fieldName, oldVal, newVal) {\n    const newState = {};\n    newState[fieldName] = newVal;\n    this.setState(newState);\n  }\n\n  render() {\n    const springWave = (\n      <Spring\n        to={{\n          strokeWidth: this.state.strokeWidth,\n          periodWidth: this.state.periodWidth,\n          amplitude: this.state.amplitude,\n          numCycles: this.state.numCycles,\n          height: this.state.height,\n          width: this.state.width,\n          startXOffset: this.state.startXOffset,\n        }}\n        delay={100}\n        onRest={(item) => {\n          this.setState({ startXOffset: item.startXOffset });\n        }}\n      >\n        {(animatedProps) => {\n\n          const props = { ...animatedProps, showDebug: this.state.showDebug };\n          const wave = <SVGWave {...props} />\n\n          const monitor = <ComponentMonitor\n            subject={wave}\n            mins={{\n              strokeWidth: minStroke,\n              periodWidth: minPeriodWidth,\n              amplitude: minAmplitude,\n              numCycles: minCycles,\n              height: minHeight,\n              width: minWidth,\n              startXOffset: minXOffset,\n            }}\n\n            maxes={{\n              strokeWidth: maxStroke,\n              periodWidth: maxPeriodWidth,\n              amplitude: maxAmplitude,\n              numCycles: maxCycles,\n              height: maxHeight,\n              width: maxWidth,\n              startXOffset: maxXOffset,\n            }}\n\n            onChange={this.onChange.bind(this)}\n          />;\n          return (\n            <div>\n              {wave}\n              {monitor}\n            </div>\n          );\n        }}\n      </Spring>\n    );\n\n    return (\n      <div>\n        <Spring\n          from={{ opacity: 0 }}\n          to={{ opacity: 1 }}\n          delay={200}\n          config={config.molasses}>\n          {(props) => {\n            return (<div\n              style={props}>\n              {springWave}\n            </div>\n            );\n          }}\n        </Spring>\n      </div>\n    );\n  }\n}\n\nexport default SVGWaveController;\n","import React, { Component } from 'react';\nimport SVGWaveController from './SVGWaveController';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          React SVG Wave\n        </header>\n        <div style={{ margin: 10 }}>\n          <SVGWaveController />\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}